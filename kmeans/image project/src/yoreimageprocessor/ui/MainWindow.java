/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package yoreimageprocessor.ui;

import yoreimageprocessor.util.ImageProcessor;
import java.awt.Desktop;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import yoreimageprocessor.util.Run;

/**
 *
 * @author Sachindra
 */
public class MainWindow extends javax.swing.JFrame {

    private File sourceFolder;
    private File destinationFolder;
    JFileChooser sourceFolderChooser;
    JFileChooser destinationFolderChooser;
    JFileChooser logFileChooser;
    Run run = new Run();

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();

        sourceFolderChooser = new JFileChooser();
        sourceFolderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        sourceFolderChooser.setDialogTitle("Select Source Image Folder");
        sourceFolderChooser.setAcceptAllFileFilterUsed(false);

        destinationFolderChooser = new JFileChooser();
        destinationFolderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        destinationFolderChooser.setDialogTitle("Select Destination Image Folder");
        destinationFolderChooser.setAcceptAllFileFilterUsed(false);

        logFileChooser = new JFileChooser() {
            @Override
            public void approveSelection() {
                File f = getSelectedFile();
                if (f.exists() && getDialogType() == SAVE_DIALOG) {
                    int result = JOptionPane.showConfirmDialog(this, "The file already exists. Do you want to replace it?", "Existing file", JOptionPane.YES_NO_CANCEL_OPTION);
                    switch (result) {
                        case JOptionPane.YES_OPTION:
                            super.approveSelection();
                            return;
                        case JOptionPane.NO_OPTION:
                            return;
                        case JOptionPane.CLOSED_OPTION:
                            return;
                        case JOptionPane.CANCEL_OPTION:
                            cancelSelection();
                            return;
                    }
                }
                super.approveSelection();
            }
        };
        logFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        logFileChooser.setDialogTitle("Select the log file location");
        FileNameExtensionFilter logFileFilter = new FileNameExtensionFilter("Text Files (.txt)", "txt");
        logFileChooser.setFileFilter(logFileFilter);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        completedProgressBar = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        imagesFoundTextArea = new javax.swing.JTextArea();
        sourceFolderLabel = new javax.swing.JLabel();
        destinationFolderLabel = new javax.swing.JLabel();
        sourceImageFolderTextField = new javax.swing.JTextField();
        destinationImageFolderTextField = new javax.swing.JTextField();
        browseSourceImageFolderButton = new javax.swing.JButton();
        browserDestinationImageFolderButton = new javax.swing.JButton();
        generateButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        sourceFolderMenuItem = new javax.swing.JMenuItem();
        destinationFolderMenuItem = new javax.swing.JMenuItem();
        saveLogMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        processMenuItem = new javax.swing.JMenuItem();
        settingsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Yore Image Processor");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        imagesFoundTextArea.setEditable(false);
        imagesFoundTextArea.setColumns(20);
        imagesFoundTextArea.setRows(5);
        jScrollPane1.setViewportView(imagesFoundTextArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
        );

        sourceFolderLabel.setText("Source Image Folder:");

        destinationFolderLabel.setText("Destination Image Folder:");

        sourceImageFolderTextField.setEditable(false);

        destinationImageFolderTextField.setEditable(false);

        browseSourceImageFolderButton.setText("Browse");
        browseSourceImageFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseSourceImageFolderButtonActionPerformed(evt);
            }
        });

        browserDestinationImageFolderButton.setText("Browse");
        browserDestinationImageFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browserDestinationImageFolderButtonActionPerformed(evt);
            }
        });

        generateButton.setText("Generate Resized Images");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        sourceFolderMenuItem.setText("Select Source Folder");
        sourceFolderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceFolderMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(sourceFolderMenuItem);

        destinationFolderMenuItem.setText("Select Destination Folder");
        destinationFolderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationFolderMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(destinationFolderMenuItem);

        saveLogMenuItem.setText("Save Log");
        saveLogMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveLogMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveLogMenuItem);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        processMenuItem.setText("Generate");
        processMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(processMenuItem);

        settingsMenuItem.setText("Settings");
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(settingsMenuItem);

        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(destinationFolderLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sourceFolderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(10, 10, 10)))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(generateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                            .addComponent(destinationImageFolderTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sourceImageFolderTextField, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(browseSourceImageFolderButton)
                                .addComponent(browserDestinationImageFolderButton))
                            .addComponent(openButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(completedProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {browseSourceImageFolderButton, browserDestinationImageFolderButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(browseSourceImageFolderButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sourceFolderLabel)
                        .addComponent(sourceImageFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(destinationImageFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browserDestinationImageFolderButton)
                    .addComponent(destinationFolderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(openButton)
                    .addComponent(generateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(completedProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {browseSourceImageFolderButton, browserDestinationImageFolderButton, destinationImageFolderTextField, generateButton, sourceImageFolderTextField});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sourceFolderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceFolderMenuItemActionPerformed
        if (sourceFolderChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            sourceFolder = sourceFolderChooser.getSelectedFile();
            sourceImageFolderTextField.setText(sourceFolder.getAbsolutePath());
        }
    }//GEN-LAST:event_sourceFolderMenuItemActionPerformed

    private void destinationFolderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationFolderMenuItemActionPerformed
        if (destinationFolderChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            destinationFolder = destinationFolderChooser.getSelectedFile();
            destinationImageFolderTextField.setText(destinationFolder.getAbsolutePath());
        }
    }//GEN-LAST:event_destinationFolderMenuItemActionPerformed

    private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuItemActionPerformed
        SettingsDialog settingsDialog = new SettingsDialog(this, true);
        settingsDialog.setVisible(true);
    }//GEN-LAST:event_settingsMenuItemActionPerformed

    private void processMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processMenuItemActionPerformed
        if (sourceFolder == null) {
            JOptionPane.showMessageDialog(this, "Please select the source image folder");
            return;
        } else if (destinationFolder == null) {
            JOptionPane.showMessageDialog(this, "Please select the destination image folder");
            return;
        } else if (!sourceFolder.exists()) {
            JOptionPane.showMessageDialog(this, "Source image folder does not exists");
            return;
        } else if (!destinationFolder.exists()) {
            JOptionPane.showMessageDialog(this, "Destination image folder does not exists");
            return;
        } else if (!sourceFolder.isDirectory()) {
            JOptionPane.showMessageDialog(this, "Source image folder does not exists");
            return;
        } else if (!destinationFolder.isDirectory()) {
            JOptionPane.showMessageDialog(this, "Destination image folder does not exists");
            return;
        }
        run.setRun(true);
        ImageProcessor imageProcessor = new ImageProcessor(sourceFolder, destinationFolder, run);
        imagesFoundTextArea.setText("");
        completedProgressBar.setValue(0);
        imageProcessor.process(imagesFoundTextArea, completedProgressBar, cancelButton);
    }//GEN-LAST:event_processMenuItemActionPerformed

    private void browseSourceImageFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseSourceImageFolderButtonActionPerformed
        sourceFolderMenuItem.doClick();
    }//GEN-LAST:event_browseSourceImageFolderButtonActionPerformed

    private void browserDestinationImageFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browserDestinationImageFolderButtonActionPerformed
        destinationFolderMenuItem.doClick();
    }//GEN-LAST:event_browserDestinationImageFolderButtonActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        processMenuItem.doClick();
    }//GEN-LAST:event_generateButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        if (destinationFolder == null) {
            JOptionPane.showMessageDialog(this, "Please select the destination image folder");
            return;
        } else if (!destinationFolder.exists()) {
            JOptionPane.showMessageDialog(this, "Destination image folder does not exists");
            return;
        } else if (!destinationFolder.isDirectory()) {
            JOptionPane.showMessageDialog(this, "Destination image folder does not exists");
            return;
        }
        try {
            Desktop.getDesktop().open(destinationFolder);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        run.setRun(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveLogMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveLogMenuItemActionPerformed
        int option = logFileChooser.showSaveDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            FileWriter logFileWriter = null;
            try {
                File logFile = logFileChooser.getSelectedFile();
                if (!logFile.getPath().toLowerCase().endsWith(".txt")) {
                    logFile = new File(logFile.getPath() + ".txt");
                }
                logFileWriter = new FileWriter(logFile);
                logFileWriter.write(imagesFoundTextArea.getText());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Log file save error!");
            } finally {
                try {
                    logFileWriter.close();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Log file save error!");
                }
            }
        }
    }//GEN-LAST:event_saveLogMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseSourceImageFolderButton;
    private javax.swing.JButton browserDestinationImageFolderButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JProgressBar completedProgressBar;
    private javax.swing.JLabel destinationFolderLabel;
    private javax.swing.JMenuItem destinationFolderMenuItem;
    private javax.swing.JTextField destinationImageFolderTextField;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton generateButton;
    private javax.swing.JTextArea imagesFoundTextArea;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton openButton;
    private javax.swing.JMenuItem processMenuItem;
    private javax.swing.JMenuItem saveLogMenuItem;
    private javax.swing.JMenuItem settingsMenuItem;
    private javax.swing.JLabel sourceFolderLabel;
    private javax.swing.JMenuItem sourceFolderMenuItem;
    private javax.swing.JTextField sourceImageFolderTextField;
    // End of variables declaration//GEN-END:variables
}
